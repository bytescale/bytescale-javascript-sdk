name: Continuous Integration

on:
  pull_request:
    branches: ["*"]
  push:
    branches: ["*"]

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: "Install node & npm"
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: "Install repository dependencies"
        run: npm ci

      - name: "Check code style"
        run: find . -type f \( -iname \*.js -o -iname \*.jsx -o -iname \*.ts -o -iname \*.tsx \) | grep -v node_modules | grep -v /dist/ | xargs ./node_modules/.bin/prettier --check

      - name: "Upload.js (npm install)"
        run: npm ci
        working-directory: ./lib

      - name: "Acceptance tests (npm install)"
        run:
          # We use 'install' rather than 'ci' due to lack of 'packages-lock.json' in this specific
          # project: we don't use 'packages-lock.json' because this project has a local dependency on
          # 'upload-js' via tarball, which is rarely rebuilt on the developers machine, making the
          # 'package-lock.json' often stale, causing 'npm ci' to fail. We don't mind using 'npm install'
          # and missing out on the hash-checks, as we don't actually publish this package, so security
          # isn't as much of a concern.
          npm install
        working-directory: ./examples

      - name: "Acceptance tests (start web server)"
        run:
          # Run in 'dist' mode to ensure the packaged 'uploadjs' NPM module is used,
          # rather than loading 'upload-js' from source (for a better end-to-end test).
          npm run start:dist &
        working-directory: ./examples

      - name: "Documentation (npm install)"
        run: npm ci
        working-directory: ./docs

      - name: "Verify BROWSERS.md up-to-date"
        run: |
          npm run generate-browsers-md
          changes=$(git --no-pager diff -- ../BROWSERS.md)
          if [[ ! -z "$changes" ]]; then
            echo "Changes to BROWSERS.md:"
            echo ""
            echo $changes
            echo ""
            echo "BROWSERS.md needs updating!"
            echo ""
            echo "Please run the following command:"
            echo ""
            echo "  (cd docs && npm run generate-browsers-md)"
            echo ""
            exit 1
          fi
        working-directory: ./docs

      # Note: we put other steps between the 'npm start' and the test runs, just to make time for the server to spin-up.
      - name: "Acceptance tests"
        run: npm test
        working-directory: ./examples

      - name: Save test report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: ./examples/tmp/test-report

      - name: "Publish (CDN)"
        if: github.ref == 'refs/heads/main'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
        working-directory: ./lib
        run: npm run publish:cdn:onrelease

      - name: "Publish (NPM)"
        if: github.ref == 'refs/heads/main'
        uses: pascalgn/npm-publish-action@1.3.5
        with:
          tag_name: "v%s"
          tag_message: "v%s"
          commit_pattern: "^Release (\\S+)" # Sync with package.json "publish:cdn:onrelease" script.
          workspace: "./lib"
          publish_command: "yarn"
          publish_args: "--non-interactive"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically generated by GitHub / is not in our secrets.
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: "Notification on success"
        if: github.ref == 'refs/heads/main'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: deployments
          SLACK_COLOR: "#17BB5E"
          SLACK_TITLE: "Built: upload-js :rocket:"
          SLACK_FOOTER: "This package was successfully built."
          MSG_MINIMAL: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: "Notification on failure"
        if: github.ref == 'refs/heads/main' && failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: deployments
          SLACK_COLOR: "#BB1717"
          SLACK_TITLE: "Failed: upload-js :boom:"
          SLACK_FOOTER: "No packages published."
          MSG_MINIMAL: true
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
