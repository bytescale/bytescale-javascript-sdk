/* tslint:disable */
/* eslint-disable */
/**
 * @bytescale/api
 * Bytescale API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: hello@bytescale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import * as runtime from "../runtime";
import type {
  // @ts-ignore
  BasicUploadResponse,
  // @ts-ignore
  BeginMultipartUploadRequest,
  // @ts-ignore
  BeginMultipartUploadResponse,
  // @ts-ignore
  CompleteMultipartUploadResponse,
  // @ts-ignore
  CompleteUploadPartRequest,
  // @ts-ignore
  ErrorResponse,
  // @ts-ignore
  UploadFromUrlRequest,
  // @ts-ignore
  UploadPart,
  // @ts-ignore
  UploadPartList
} from "../models";

// Omitted by generator (so we add manually).
// @ts-ignore
import type { TransformationParams } from "../models";

export interface BeginMultipartUploadOperationParams {
  accountId: string;

  /**
   *
   */
  beginMultipartUploadRequest: BeginMultipartUploadRequest;
}

export interface CompleteUploadPartOperationParams {
  accountId: string;

  uploadId: string;

  uploadPartIndex: number;

  completeUploadPartRequest: CompleteUploadPartRequest;
}

export interface GetUploadPartParams {
  accountId: string;

  uploadId: string;

  uploadPartIndex: number;
}

export interface ListUploadPartsParams {
  accountId: string;

  uploadId: string;
}

export interface UploadFromUrlOperationParams {
  accountId: string;

  /**
   *
   */
  uploadFromUrlRequest: UploadFromUrlRequest;
}

export class UploadApi extends runtime.BaseAPI {
  /**
   * Begins a new multipart file upload process.
   */
  async beginMultipartUpload(params: BeginMultipartUploadOperationParams): Promise<BeginMultipartUploadResponse> {
    const query: any = {};
    const headers: runtime.HTTPHeaders = {};

    headers["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v2/accounts/{accountId}/uploads`.replace(
          `{${"accountId"}}`,
          // @ts-ignore
          this.encodeParam("accountId", params.accountId)
        ),
        method: "POST",
        headers,
        query,
        body: params.beginMultipartUploadRequest
      },
      undefined,
      [][0]
    );

    return await new runtime.JSONApiResponse<BeginMultipartUploadResponse>(response).value();
  }

  /**
   * Marks an upload part as uploaded.  You must call this endpoint after you have successfully issued a `PUT` request to the `uploadUrl` on the corresponding UploadPart.
   */
  async completeUploadPart(params: CompleteUploadPartOperationParams): Promise<CompleteMultipartUploadResponse> {
    const query: any = {};
    const headers: runtime.HTTPHeaders = {};

    headers["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v2/accounts/{accountId}/uploads/{uploadId}/parts/{uploadPartIndex}`
          .replace(
            `{${"accountId"}}`,
            // @ts-ignore
            this.encodeParam("accountId", params.accountId)
          )
          .replace(
            `{${"uploadId"}}`,
            // @ts-ignore
            this.encodeParam("uploadId", params.uploadId)
          )
          .replace(
            `{${"uploadPartIndex"}}`,
            // @ts-ignore
            this.encodeParam("uploadPartIndex", params.uploadPartIndex)
          ),
        method: "PUT",
        headers,
        query,
        body: params.completeUploadPartRequest
      },
      undefined,
      [][0]
    );

    return await new runtime.JSONApiResponse<CompleteMultipartUploadResponse>(response).value();
  }

  /**
   * Gets a remaining upload part for a multipart file upload.
   */
  async getUploadPart(params: GetUploadPartParams): Promise<UploadPart> {
    const query: any = {};
    const headers: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/accounts/{accountId}/uploads/{uploadId}/parts/{uploadPartIndex}`
          .replace(
            `{${"accountId"}}`,
            // @ts-ignore
            this.encodeParam("accountId", params.accountId)
          )
          .replace(
            `{${"uploadId"}}`,
            // @ts-ignore
            this.encodeParam("uploadId", params.uploadId)
          )
          .replace(
            `{${"uploadPartIndex"}}`,
            // @ts-ignore
            this.encodeParam("uploadPartIndex", params.uploadPartIndex)
          ),
        method: "GET",
        headers,
        query
      },
      undefined,
      [][0]
    );

    return await new runtime.JSONApiResponse<UploadPart>(response).value();
  }

  /**
   * Lists the remaining upload parts for a multipart file upload.  An empty array is returned when the upload is complete.
   */
  async listUploadParts(params: ListUploadPartsParams): Promise<UploadPartList> {
    const query: any = {};
    const headers: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/accounts/{accountId}/uploads/{uploadId}/parts`
          .replace(
            `{${"accountId"}}`,
            // @ts-ignore
            this.encodeParam("accountId", params.accountId)
          )
          .replace(
            `{${"uploadId"}}`,
            // @ts-ignore
            this.encodeParam("uploadId", params.uploadId)
          ),
        method: "GET",
        headers,
        query
      },
      undefined,
      [][0]
    );

    return await new runtime.JSONApiResponse<UploadPartList>(response).value();
  }

  /**
   * Upload from a URL with a single HTTP request:
   */
  async uploadFromUrl(params: UploadFromUrlOperationParams): Promise<BasicUploadResponse> {
    const query: any = {};
    const headers: runtime.HTTPHeaders = {};

    headers["Content-Type"] = "application/json";

    const response = await this.request(
      {
        path: `/v2/accounts/{accountId}/uploads/url`.replace(
          `{${"accountId"}}`,
          // @ts-ignore
          this.encodeParam("accountId", params.accountId)
        ),
        method: "POST",
        headers,
        query,
        body: params.uploadFromUrlRequest
      },
      undefined,
      [][0]
    );

    return await new runtime.JSONApiResponse<BasicUploadResponse>(response).value();
  }
}
